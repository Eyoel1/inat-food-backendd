// inat-food-backend/src/controllers/menuItemController.ts

import { Request, Response } from "express";
import cloudinary from "cloudinary";
import MenuItem from "../models/menuItemModel";
import {
  createOne,
  getAll,
  getOne,
  updateOne,
  deleteOne,
} from "./handlerFactory";

// --- Standard CRUD using the Factory ---
// These functions are generated by our reusable handler factory, which provides
// a robust and consistent way to handle basic Create, Read, Update, and Delete operations.

/**
 * Creates a single menu item.
 */
export const createMenuItem = createOne(MenuItem);

/**
 * Retrieves a list of all menu items.
 */
export const getAllMenuItems = getAll(MenuItem);

/**
 * Retrieves a single menu item by its ID.
 */
export const getMenuItem = getOne(MenuItem);

/**
 * Updates a single menu item by its ID.
 */
export const updateMenuItem = updateOne(MenuItem);

/**
 * Deletes a single menu item by its ID.
 */
export const deleteMenuItem = deleteOne(MenuItem);

// --- Cloudinary Signature Function ---

/**
 * Creates a secure, time-sensitive signature for the frontend to use for
 * direct-to-Cloudinary uploads. This prevents our API secret from ever
 * being exposed in the client-side application. The frontend sends the exact
 * parameters it wants to upload with, and this function securely signs that payload.
 */
export const getCloudinarySignature = (req: Request, res: Response) => {
  try {
    // The parameters to be signed are sent in the request body from the frontend.
    // This typically includes a `timestamp` and a `folder` name.
    const paramsToSign = req.body;

    if (!process.env.CLOUDINARY_API_SECRET) {
      console.error(
        "CRITICAL ERROR: Cloudinary API secret is not configured in the .env file."
      );
      throw new Error("Cloudinary API secret is not configured.");
    }

    // Use Cloudinary's utility to securely sign the provided parameter object.
    const signature = cloudinary.v2.utils.api_sign_request(
      paramsToSign,
      process.env.CLOUDINARY_API_SECRET
    );

    // Send back only the signature. The frontend will use this along with the
    // other parameters and the API key to complete the upload.
    res.status(200).json({ signature });
  } catch (error) {
    console.error("Error in getCloudinarySignature:", error);
    res.status(500).json({ status: "fail", message: (error as Error).message });
  }
};
